#include "admin.fc";
#include "get-methods.fc";
#include "msg.fc";
#include "op-codes.fc";
#include "storage.fc";

() payout(slice sender_address, int amount, slice msg) impure inline_ref {
    cell body = begin_cell()
        .store_uint(0, 32)
        .store_slice(msg)
        .end_cell();

    cell msg = begin_cell()
        .store_uint(0x18, 6)
        .store_slice(sender_address)
        .store_coins(amount)
        .store_uint(1, 1 + 4 + 4 + 64 + 32 + 1 + 1)
        .store_ref(body)
        .end_cell();
    
    send_raw_message(msg, 0);
}

() start(slice sender_address, int msg_value, int hash) impure inline_ref {
    throw_unless(exit::invalid_bet(), msg_value == oneton());
    int new_hash = slice_hash(
        begin_cell()
            .store_uint(global::hash, 256)
            .store_uint(hash, 256)
            .store_uint(cur_lt(), 64)
            .store_uint(now(), 64)
        .end_cell()
        .begin_parse()
    );

    randomize(new_hash);
    global::hash = new_hash;

    int number = rand(10000); ;; [0, 10000]
    global::last_number = number;
    global::available_balance += oneton();

    if (number < 10) { ;; win x10
        int win = 10 * oneton();
        int comission = muldiv(win, 10, 100);
        win -= comission;

        global::available_balance -= (win + comission);
        global::service_balance += comission;

        payout(sender_address, win, msg::jackpot());

        return();

    }

    if (number < 4000 ) { ;; win x2
        int win = 2 * oneton();
        int comission = muldiv(win, 10, 100);
        win -= comission;

        global::available_balance -= (win + comission);
        global::service_balance += comission;

        payout(sender_address, win, msg::win());

        return();

    }

}





